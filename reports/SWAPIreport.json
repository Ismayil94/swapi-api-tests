{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-20T05:01:46.547Z",
    "end": "2023-11-20T05:02:06.644Z",
    "duration": 20097,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2d250c2d-ebd2-4850-bb01-917b0310e616",
      "title": "",
      "fullFile": "/Users/ismayilaliyev/Desktop/swapi-api-tests/swapi-api-tests/tests/tests.js",
      "file": "/tests/tests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
          "title": "Star Wars API Tests",
          "fullFile": "/Users/ismayilaliyev/Desktop/swapi-api-tests/swapi-api-tests/tests/tests.js",
          "file": "/tests/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of all Star Wars characters",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars characters",
              "timedOut": false,
              "duration": 3714,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${swapiUrl}/people`);\nassert.strictEqual(response.status, 200, \"Unexpected status code\");\n// Verify that at least one character is returned\nassert.ok(response.data.results.length > 0, \"No characters returned\");",
              "err": {},
              "uuid": "6451c38f-7526-4cf0-9b65-96160e8047b1",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve details for a specific Star Wars character",
              "fullTitle": "Star Wars API Tests should retrieve details for a specific Star Wars character",
              "timedOut": false,
              "duration": 929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const characterName = \"Luke Skywalker\";\nconst response = await axios.get(`${swapiUrl}/people`, {\n  params: { search: characterName },\n});\nconsole.log(response.data.name);\nassert.strictEqual(response.status, 200, \"Unexpected status code\");\n// Verify that the response includes the correct character details, and only one result is returned\nassert.strictEqual(response.data.count, 1, \"Unexpected number of results\");\nassert.strictEqual(\n  response.data.results[0].name,\n  characterName,\n  \"Incorrect character name\"\n);\nassert.equal(\n  response.data.results[0].films.length,\n  4,\n  \"Incorrect number of films that character in\"\n);",
              "err": {},
              "uuid": "4dbc6b80-7622-4299-971c-5a005542ce87",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a list of all Star Wars films",
              "fullTitle": "Star Wars API Tests should retrieve a list of all Star Wars films",
              "timedOut": false,
              "duration": 8991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${swapiUrl}/films`);\nassert.strictEqual(response.status, 200, \"Unexpected status code\");\n// Verify that at least one film is returned\nassert.ok(response.data.results.length > 0, \"No films returned\");",
              "err": {},
              "uuid": "36a4a364-218d-4b09-b7e6-e9ab32ce5b65",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve details for a specific Star Wars film",
              "fullTitle": "Star Wars API Tests should retrieve details for a specific Star Wars film",
              "timedOut": false,
              "duration": 1688,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const filmTitle = \"A New Hope\";\nconst response = await axios.get(`${swapiUrl}/films`, {\n  params: { search: filmTitle },\n});\nconsole.log(response.data.director);\nassert.strictEqual(response.status, 200, \"Unexpected status code\");\n// Verify that the response includes the correct film details, and only one result is returned\nassert.strictEqual(response.data.count, 1, \"Unexpected number of results\");\nassert.strictEqual(\n  response.data.results[0].title,\n  filmTitle,\n  \"Incorrect film details\"\n);\nassert.equal(\n  response.data.results[0].director,\n  \"George Lucas\",\n  \"Incorrect director name\"\n);\nassert.equal(\n  response.data.results[0].release_date,\n  \"1977-05-25\",\n  \"Incorrect release date\"\n);",
              "err": {},
              "uuid": "0834520e-3d14-42c4-80b1-05425d89e1fd",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle the case when searching for a non-existent character",
              "fullTitle": "Star Wars API Tests should handle the case when searching for a non-existent character",
              "timedOut": false,
              "duration": 874,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentCharacter = \"NonExistentCharacter123\";\nconst response = await axios.get(`${swapiUrl}/people`, {\n  params: { search: nonExistentCharacter },\n});\nassert.strictEqual(response.status, 200, \"Unexpected status code\");\n// Verify that no results are returned for the non-existent character\nassert.strictEqual(response.data.count, 0, \"Unexpected number of results\");",
              "err": {},
              "uuid": "09e6e184-9339-45b0-a8b4-2346ebd6fcbf",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle the case when searching for a non-existent film",
              "fullTitle": "Star Wars API Tests should handle the case when searching for a non-existent film",
              "timedOut": false,
              "duration": 715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentFilm = \"NonExistentFilm123\";\nconst response = await axios.get(`${swapiUrl}/films`, {\n  params: { search: nonExistentFilm },\n});\nassert.strictEqual(response.status, 200, \"Unexpected status code\");\n// Verify that no results are returned for the non-existent film\nassert.strictEqual(response.data.count, 0, \"Unexpected number of results\");",
              "err": {},
              "uuid": "59e00198-a0e1-409c-9e42-266e00972870",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to retrieve a list of characters with an invalid endpoint URL",
              "fullTitle": "Star Wars API Tests should fail to retrieve a list of characters with an invalid endpoint URL",
              "timedOut": false,
              "duration": 718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.get(`${swapiUrl}/invalid-endpoint`);\n} catch (error) {\n  // Verify that the response status is an error code (e.g., 404 Not Found)\n  assert.strictEqual(error.response.status, 404, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "886e11ba-5222-4ce0-a5a1-24206f1dd914",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to retrieve details for a character with an invalid character ID",
              "fullTitle": "Star Wars API Tests should fail to retrieve details for a character with an invalid character ID",
              "timedOut": false,
              "duration": 815,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Send a GET request for an invalid character ID\n  const response = await axios.get(`${swapiUrl}/people/12345`);\n} catch (error) {\n  // Verify that the response status is an error code (e.g., 404 Not Found)\n  assert.strictEqual(error.response.status, 404, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "beda5fb8-d5db-4a2a-a405-5f785e54805f",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to retrieve a list of films with an invalid endpoint URL",
              "fullTitle": "Star Wars API Tests should fail to retrieve a list of films with an invalid endpoint URL",
              "timedOut": false,
              "duration": 617,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Send a GET request to an invalid endpoint URL\n  const response = await axios.get(`${swapiUrl}/invalid-endpoint`);\n} catch (error) {\n  // Verify that the response status is an error code (e.g., 404 Not Found)\n  assert.strictEqual(error.response.status, 404, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "99ca09a9-b9ab-4058-839e-c10cee50e860",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to retrieve details for a film with an invalid film ID",
              "fullTitle": "Star Wars API Tests should fail to retrieve details for a film with an invalid film ID",
              "timedOut": false,
              "duration": 512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  // Send a GET request to the SWAPI endpoint for an invalid film ID\n  const response = await axios.get(`${swapiUrl}/films/12345`);\n} catch (error) {\n  // Verify that the response status is an error code (e.g., 404 Not Found)\n  assert.strictEqual(error.response.status, 404, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "5e9104a4-93a1-4719-a8f9-8613f310daf4",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to send a GET request with an unsupported HTTP method",
              "fullTitle": "Star Wars API Tests should fail to send a GET request with an unsupported HTTP method",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Send a GET request to the SWAPI endpoint using an unsupported HTTP method (POST)\ntry {\n  const response = await axios.post(\n    `${swapiUrl}/people`,\n    {},\n    {\n      method: \"POST\",\n    }\n  );\n} catch (error) {\n  // Verify that the response status is an error code (e.g., 405 Method Not Allowed)\n  assert.strictEqual(error.response.status, 405, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "84d2c0f1-0ff6-471f-9a8a-b2fa3d40f5c0",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle the case when the API returns a 403 Forbidden response",
              "fullTitle": "Star Wars API Tests should handle the case when the API returns a 403 Forbidden response",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const mock = new MockAdapter(axios);\n  // Set up mock for a 403 Forbidden response\n  mock.onGet(`${swapiUrl}/forbidden`).reply(403, {});\n  await axios.get(`${swapiUrl}/forbidden`);\n} catch (error) {\n  // Verify that the response status is 403\n  assert.strictEqual(error.response.status, 403, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "3d13ef1e-e3e4-4134-917f-3b01e3cbfb5e",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle the case when the API returns a 503 Service Unavailable response",
              "fullTitle": "Star Wars API Tests should handle the case when the API returns a 503 Service Unavailable response",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const mock = new MockAdapter(axios);\n  // Set up mock for a 503 Service Unavailable response\n  mock.onGet(`${swapiUrl}/unavailable`).reply(503, {});\n  await axios.get(`${swapiUrl}/unavailable`);\n} catch (error) {\n  // Verify that the response status is 503\n  assert.strictEqual(error.response.status, 503, \"Unexpected status code\");\n}",
              "err": {},
              "uuid": "03b3fb02-2d49-44e1-abbd-310b0c3a3401",
              "parentUUID": "4a8fd2ab-3d8a-4172-a094-a63c61b6a94c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6451c38f-7526-4cf0-9b65-96160e8047b1",
            "4dbc6b80-7622-4299-971c-5a005542ce87",
            "36a4a364-218d-4b09-b7e6-e9ab32ce5b65",
            "0834520e-3d14-42c4-80b1-05425d89e1fd",
            "09e6e184-9339-45b0-a8b4-2346ebd6fcbf",
            "59e00198-a0e1-409c-9e42-266e00972870",
            "886e11ba-5222-4ce0-a5a1-24206f1dd914",
            "beda5fb8-d5db-4a2a-a405-5f785e54805f",
            "99ca09a9-b9ab-4058-839e-c10cee50e860",
            "5e9104a4-93a1-4719-a8f9-8613f310daf4",
            "84d2c0f1-0ff6-471f-9a8a-b2fa3d40f5c0",
            "3d13ef1e-e3e4-4134-917f-3b01e3cbfb5e",
            "03b3fb02-2d49-44e1-abbd-310b0c3a3401"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20080,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "SWAPIreport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "SWAPIreport"
      },
      "version": "6.2.0"
    }
  }
}